{"ast":null,"code":"var _jsxFileName = \"/home/matt/Projects/Cypress2/frontend/src/pages/Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport { reportService } from '../services/api';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Dashboard() {\n  _s();\n  const [user, setUser] = useState(null);\n  const [showReportForm, setShowReportForm] = useState(false);\n  const [reportFormData, setReportFormData] = useState({\n    name: '',\n    description: '',\n    userLocation: '',\n    type: 'infrastructure'\n  });\n  const [locationCoordinates, setLocationCoordinates] = useState(null);\n  const [formError, setFormError] = useState('');\n  const [formSuccess, setFormSuccess] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [userReports, setUserReports] = useState([]);\n  const [reportsFetched, setReportsFetched] = useState(false);\n  const navigate = useNavigate();\n  const autocompleteRef = useRef(null);\n  const locationInputRef = useRef(null);\n\n  // Function to fetch user reports\n  const fetchUserReports = async () => {\n    try {\n      setReportsFetched(false);\n      const response = await reportService.getUserReports();\n      if (response.data.success) {\n        console.log('User reports:', response.data.data);\n        setUserReports(response.data.data);\n      } else {\n        console.error('Failed to fetch reports:', response.data.message);\n      }\n    } catch (err) {\n      console.error('Error fetching user reports:', err);\n    } finally {\n      setReportsFetched(true);\n    }\n  };\n\n  // Initialize Google Maps Autocomplete\n  const initializeAutocomplete = () => {\n    if (!window.google || !locationInputRef.current) {\n      console.error('Google API not loaded or location input ref not available');\n      return;\n    }\n    try {\n      // Create autocomplete instance with specific options\n      autocompleteRef.current = new window.google.maps.places.Autocomplete(locationInputRef.current, {\n        types: ['address'],\n        componentRestrictions: {\n          country: 'ca'\n        },\n        // Restrict to Canada for this example\n        fields: ['address_components', 'formatted_address', 'geometry', 'name']\n      });\n\n      // Add listener for place changed\n      autocompleteRef.current.addListener('place_changed', () => {\n        const place = autocompleteRef.current.getPlace();\n        if (!place.geometry || !place.geometry.location) {\n          console.error('No location details available for this place');\n          return;\n        }\n\n        // Get the selected address\n        const address = place.formatted_address;\n\n        // Get the location coordinates\n        const lat = place.geometry.location.lat();\n        const lng = place.geometry.location.lng();\n\n        // Update form data with the selected address\n        setReportFormData(prev => ({\n          ...prev,\n          userLocation: address\n        }));\n\n        // Save coordinates for submission\n        setLocationCoordinates({\n          lat,\n          lng\n        });\n        console.log('Selected location:', {\n          address,\n          lat,\n          lng\n        });\n      });\n      console.log('Google Places Autocomplete initialized successfully');\n    } catch (error) {\n      console.error('Error initializing Google Places Autocomplete:', error);\n    }\n  };\n\n  // Load Google Maps API script\n  const loadGoogleMapsScript = () => {\n    // If script is already loaded and Google API is available\n    if (window.google && window.google.maps && window.google.maps.places) {\n      console.log('Google API already loaded');\n      initializeAutocomplete();\n      return;\n    }\n\n    // Check if script is already being loaded\n    const existingScript = document.getElementById('google-maps-script');\n    if (existingScript) {\n      console.log('Google Maps script is already loading');\n      return;\n    }\n    try {\n      const googleMapsApiKey = process.env.REACT_APP_GOOGLE_MAPS_API_KEY || '';\n\n      // Use a hardcoded API key for testing if environment variable is not set\n      const apiKey = googleMapsApiKey === 'YOUR_GOOGLE_MAPS_API_KEY_HERE' ? 'AIzaSyB41DRUbKWJHPxaFjMAwdrzWzbVKartNGg' :\n      // Example API key with limited functionality\n      googleMapsApiKey;\n      console.log('Loading Google Maps API with key:', apiKey.substring(0, 5) + '...');\n      const script = document.createElement('script');\n      script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places&callback=initGoogleMapsCallback`;\n      script.id = 'google-maps-script';\n      script.async = true;\n      script.defer = true;\n\n      // Define global callback function\n      window.initGoogleMapsCallback = () => {\n        console.log('Google Maps API loaded successfully');\n        initializeAutocomplete();\n      };\n\n      // Handle script load error\n      script.onerror = error => {\n        console.error('Error loading Google Maps script:', error);\n      };\n      document.head.appendChild(script);\n      return () => {\n        if (document.getElementById('google-maps-script')) {\n          document.head.removeChild(document.getElementById('google-maps-script'));\n        }\n        delete window.initGoogleMapsCallback;\n      };\n    } catch (error) {\n      console.error('Error setting up Google Maps script:', error);\n    }\n  };\n  useEffect(() => {\n    // Check if user is logged in\n    const token = localStorage.getItem('token');\n    const userData = localStorage.getItem('user');\n    if (!token) {\n      navigate('/login');\n      return;\n    }\n    if (userData) {\n      setUser(JSON.parse(userData));\n      // Fetch user's reports when component mounts\n      fetchUserReports();\n    }\n  }, [navigate]);\n\n  // Separate useEffect for Google Maps loading\n  useEffect(() => {\n    // Only load Google Maps API when showing the report form\n    if (showReportForm) {\n      loadGoogleMapsScript();\n\n      // Clean up when form is closed\n      return () => {\n        if (autocompleteRef.current) {\n          var _window$google, _window$google$maps, _window$google$maps$e;\n          // Clean up event listeners\n          (_window$google = window.google) === null || _window$google === void 0 ? void 0 : (_window$google$maps = _window$google.maps) === null || _window$google$maps === void 0 ? void 0 : (_window$google$maps$e = _window$google$maps.event) === null || _window$google$maps$e === void 0 ? void 0 : _window$google$maps$e.clearInstanceListeners(autocompleteRef.current);\n          autocompleteRef.current = null;\n        }\n      };\n    }\n  }, [showReportForm]);\n  const handleReportChange = e => {\n    setReportFormData({\n      ...reportFormData,\n      [e.target.name]: e.target.value\n    });\n\n    // If the location field is changed manually, reset the coordinates\n    if (e.target.name === 'userLocation') {\n      setLocationCoordinates(null);\n    }\n  };\n  const handleReportSubmit = async e => {\n    e.preventDefault();\n    setFormError('');\n    setFormSuccess('');\n    setLoading(true);\n    try {\n      // Use the coordinates from Google Places if available, otherwise use default\n      let coordinates = [-79.3832, 43.6532]; // Toronto coordinates [longitude, latitude]\n\n      if (locationCoordinates) {\n        // Convert to [longitude, latitude] format for GeoJSON\n        coordinates = [locationCoordinates.lng, locationCoordinates.lat];\n      }\n\n      // Create proper GeoJSON Point\n      const locationData = {\n        type: 'Point',\n        coordinates: coordinates\n      };\n\n      // Create the report payload with all required fields\n      const reportData = {\n        name: reportFormData.name,\n        description: reportFormData.description,\n        userLocation: reportFormData.userLocation,\n        type: reportFormData.type,\n        location: locationData\n      };\n      console.log('Submitting report with data:', JSON.stringify(reportData, null, 2));\n\n      // Make the API request using the report service\n      const response = await reportService.createReport(reportData);\n      console.log('Response:', response.data);\n      if (response.data.success) {\n        setFormSuccess('Report submitted successfully!');\n        setReportFormData({\n          name: '',\n          description: '',\n          userLocation: '',\n          type: 'infrastructure'\n        });\n        setLocationCoordinates(null);\n        setShowReportForm(false);\n\n        // Refresh reports list after successful submission\n        fetchUserReports();\n      } else {\n        setFormError(response.data.message || 'Unknown error occurred');\n      }\n    } catch (err) {\n      console.error('Error submitting report:', err);\n\n      // Log all error details to help debug\n      if (err.response) {\n        console.error('Error status:', err.response.status);\n        console.error('Error data:', err.response.data);\n        console.error('Error headers:', err.response.headers);\n\n        // Display the exact error message from the server for duplicate reports\n        if (err.response.status === 400 && err.response.data && err.response.data.message) {\n          setFormError(err.response.data.message);\n        } else {\n          var _err$response$data;\n          setFormError(((_err$response$data = err.response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || `Server error: ${err.response.status}`);\n        }\n      } else if (err.request) {\n        console.error('No response received:', err.request);\n        setFormError('No response from server. Please try again later.');\n      } else {\n        console.error('Error message:', err.message);\n        setFormError(`Error: ${err.message}`);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Format date for display\n  const formatDate = dateString => {\n    const options = {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    };\n    return new Date(dateString).toLocaleDateString(undefined, options);\n  };\n\n  // Helper function to render status with appropriate CSS class\n  const renderStatus = status => {\n    let statusClass = '';\n    switch (status) {\n      case 'Waiting for verification':\n        statusClass = 'status-waiting';\n        break;\n      case 'Verified':\n        statusClass = 'status-verified';\n        break;\n      case 'In progress':\n        statusClass = 'status-in-progress';\n        break;\n      case 'Solved':\n        statusClass = 'status-solved';\n        break;\n      default:\n        statusClass = '';\n    }\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      className: `status-indicator ${statusClass}`,\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Handle resolving a report\n  const handleResolveReport = async reportId => {\n    try {\n      setLoading(true);\n      const response = await reportService.updateReportStatus(reportId, 'Solved');\n      if (response.data.success) {\n        setFormSuccess('Report marked as resolved successfully!');\n        // Update the reports list to reflect the change\n        fetchUserReports();\n      } else {\n        setFormError(response.data.message || 'Failed to update report status');\n      }\n    } catch (err) {\n      console.error('Error resolving report:', err);\n      setFormError('Error updating report status. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // If not logged in, the useEffect will redirect\n  if (!user) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Welcome, \", user.username, \"!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }, this), formSuccess && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert-success\",\n      children: formSuccess\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your Profile\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Username:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 12\n        }, this), \" \", user.username]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Email:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 12\n        }, this), \" \", user.email]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Report a Problem\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 9\n      }, this), !showReportForm ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Help improve your city by reporting issues you encounter.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary\",\n          onClick: () => setShowReportForm(true),\n          children: \"Create New Report\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleReportSubmit,\n        children: [formError && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"alert-error\",\n          children: formError\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"name\",\n            children: \"Report Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"name\",\n            name: \"name\",\n            value: reportFormData.name,\n            onChange: handleReportChange,\n            className: \"form-control\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"type\",\n            children: \"Type of Issue\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            id: \"type\",\n            name: \"type\",\n            value: reportFormData.type,\n            onChange: handleReportChange,\n            className: \"form-control\",\n            required: true,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"infrastructure\",\n              children: \"Infrastructure\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 395,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"cleanliness\",\n              children: \"Cleanliness\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 396,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"human\",\n              children: \"Human-related\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 397,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"description\",\n            children: \"Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"description\",\n            name: \"description\",\n            value: reportFormData.description,\n            onChange: handleReportChange,\n            className: \"form-control\",\n            rows: \"5\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group location-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"userLocation\",\n            children: \"Your Location (Start typing for autocomplete)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 415,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"userLocation\",\n            name: \"userLocation\",\n            value: reportFormData.userLocation,\n            onChange: handleReportChange,\n            ref: locationInputRef,\n            className: \"form-control\",\n            placeholder: \"e.g., 123 Main St, Toronto\",\n            autoComplete: \"off\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 15\n          }, this), locationCoordinates && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"location-found\",\n            children: /*#__PURE__*/_jsxDEV(\"small\", {\n              children: [\"\\u2713 Location found: \", reportFormData.userLocation]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-secondary\",\n            onClick: () => setShowReportForm(false),\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 436,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"btn btn-primary\",\n            disabled: loading,\n            children: loading ? 'Submitting...' : 'Submit Report'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your Reports\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 9\n      }, this), !reportsFetched ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading your reports...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 11\n      }, this) : userReports.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"You haven't submitted any reports yet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reports-list\",\n        children: userReports.map(report => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"report-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: report.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 465,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"report-details\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Type:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 467,\n                columnNumber: 22\n              }, this), \" \", report.type]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 467,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Status:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 468,\n                columnNumber: 22\n              }, this), \" \", renderStatus(report.status)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 468,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Description:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 469,\n                columnNumber: 22\n              }, this), \" \", report.description]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 469,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Location:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 470,\n                columnNumber: 22\n              }, this), \" \", report.userLocation]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 470,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Submitted:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 471,\n                columnNumber: 22\n              }, this), \" \", formatDate(report.createdAt)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 471,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 17\n          }, this), report.status !== 'Solved' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"report-actions\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-primary\",\n              onClick: () => handleResolveReport(report._id),\n              disabled: loading,\n              children: \"Mark as Resolved\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 475,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 19\n          }, this)]\n        }, report._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 339,\n    columnNumber: 5\n  }, this);\n}\n_s(Dashboard, \"3dKro3rKdUD5qjjKU3PG9Z86g/I=\", false, function () {\n  return [useNavigate];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useNavigate","axios","reportService","jsxDEV","_jsxDEV","Fragment","_Fragment","Dashboard","_s","user","setUser","showReportForm","setShowReportForm","reportFormData","setReportFormData","name","description","userLocation","type","locationCoordinates","setLocationCoordinates","formError","setFormError","formSuccess","setFormSuccess","loading","setLoading","userReports","setUserReports","reportsFetched","setReportsFetched","navigate","autocompleteRef","locationInputRef","fetchUserReports","response","getUserReports","data","success","console","log","error","message","err","initializeAutocomplete","window","google","current","maps","places","Autocomplete","types","componentRestrictions","country","fields","addListener","place","getPlace","geometry","location","address","formatted_address","lat","lng","prev","loadGoogleMapsScript","existingScript","document","getElementById","googleMapsApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","apiKey","substring","script","createElement","src","id","async","defer","initGoogleMapsCallback","onerror","head","appendChild","removeChild","token","localStorage","getItem","userData","JSON","parse","_window$google","_window$google$maps","_window$google$maps$e","event","clearInstanceListeners","handleReportChange","e","target","value","handleReportSubmit","preventDefault","coordinates","locationData","reportData","stringify","createReport","status","headers","_err$response$data","request","formatDate","dateString","options","year","month","day","Date","toLocaleDateString","undefined","renderStatus","statusClass","className","children","fileName","_jsxFileName","lineNumber","columnNumber","handleResolveReport","reportId","updateReportStatus","username","email","onClick","onSubmit","htmlFor","onChange","required","rows","ref","placeholder","autoComplete","disabled","length","map","report","createdAt","_id","_c","$RefreshReg$"],"sources":["/home/matt/Projects/Cypress2/frontend/src/pages/Dashboard.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport { reportService } from '../services/api';\n\nfunction Dashboard() {\n  const [user, setUser] = useState(null);\n  const [showReportForm, setShowReportForm] = useState(false);\n  const [reportFormData, setReportFormData] = useState({\n    name: '',\n    description: '',\n    userLocation: '',\n    type: 'infrastructure'\n  });\n  const [locationCoordinates, setLocationCoordinates] = useState(null);\n  const [formError, setFormError] = useState('');\n  const [formSuccess, setFormSuccess] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [userReports, setUserReports] = useState([]);\n  const [reportsFetched, setReportsFetched] = useState(false);\n  const navigate = useNavigate();\n  const autocompleteRef = useRef(null);\n  const locationInputRef = useRef(null);\n\n  // Function to fetch user reports\n  const fetchUserReports = async () => {\n    try {\n      setReportsFetched(false);\n      const response = await reportService.getUserReports();\n      \n      if (response.data.success) {\n        console.log('User reports:', response.data.data);\n        setUserReports(response.data.data);\n      } else {\n        console.error('Failed to fetch reports:', response.data.message);\n      }\n    } catch (err) {\n      console.error('Error fetching user reports:', err);\n    } finally {\n      setReportsFetched(true);\n    }\n  };\n\n  // Initialize Google Maps Autocomplete\n  const initializeAutocomplete = () => {\n    if (!window.google || !locationInputRef.current) {\n      console.error('Google API not loaded or location input ref not available');\n      return;\n    }\n    \n    try {\n      // Create autocomplete instance with specific options\n      autocompleteRef.current = new window.google.maps.places.Autocomplete(\n        locationInputRef.current,\n        {\n          types: ['address'],\n          componentRestrictions: { country: 'ca' }, // Restrict to Canada for this example\n          fields: ['address_components', 'formatted_address', 'geometry', 'name']\n        }\n      );\n      \n      // Add listener for place changed\n      autocompleteRef.current.addListener('place_changed', () => {\n        const place = autocompleteRef.current.getPlace();\n        \n        if (!place.geometry || !place.geometry.location) {\n          console.error('No location details available for this place');\n          return;\n        }\n        \n        // Get the selected address\n        const address = place.formatted_address;\n        \n        // Get the location coordinates\n        const lat = place.geometry.location.lat();\n        const lng = place.geometry.location.lng();\n        \n        // Update form data with the selected address\n        setReportFormData(prev => ({\n          ...prev,\n          userLocation: address\n        }));\n        \n        // Save coordinates for submission\n        setLocationCoordinates({ lat, lng });\n        \n        console.log('Selected location:', { address, lat, lng });\n      });\n      \n      console.log('Google Places Autocomplete initialized successfully');\n    } catch (error) {\n      console.error('Error initializing Google Places Autocomplete:', error);\n    }\n  };\n\n  // Load Google Maps API script\n  const loadGoogleMapsScript = () => {\n    // If script is already loaded and Google API is available\n    if (window.google && window.google.maps && window.google.maps.places) {\n      console.log('Google API already loaded');\n      initializeAutocomplete();\n      return;\n    }\n    \n    // Check if script is already being loaded\n    const existingScript = document.getElementById('google-maps-script');\n    if (existingScript) {\n      console.log('Google Maps script is already loading');\n      return;\n    }\n    \n    try {\n      const googleMapsApiKey = process.env.REACT_APP_GOOGLE_MAPS_API_KEY || '';\n      \n      // Use a hardcoded API key for testing if environment variable is not set\n      const apiKey = googleMapsApiKey === 'YOUR_GOOGLE_MAPS_API_KEY_HERE' ? \n        'AIzaSyB41DRUbKWJHPxaFjMAwdrzWzbVKartNGg' : // Example API key with limited functionality\n        googleMapsApiKey;\n      \n      console.log('Loading Google Maps API with key:', apiKey.substring(0, 5) + '...');\n      \n      const script = document.createElement('script');\n      script.src = `https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=places&callback=initGoogleMapsCallback`;\n      script.id = 'google-maps-script';\n      script.async = true;\n      script.defer = true;\n      \n      // Define global callback function\n      window.initGoogleMapsCallback = () => {\n        console.log('Google Maps API loaded successfully');\n        initializeAutocomplete();\n      };\n      \n      // Handle script load error\n      script.onerror = (error) => {\n        console.error('Error loading Google Maps script:', error);\n      };\n      \n      document.head.appendChild(script);\n      \n      return () => {\n        if (document.getElementById('google-maps-script')) {\n          document.head.removeChild(document.getElementById('google-maps-script'));\n        }\n        delete window.initGoogleMapsCallback;\n      };\n    } catch (error) {\n      console.error('Error setting up Google Maps script:', error);\n    }\n  };\n\n  useEffect(() => {\n    // Check if user is logged in\n    const token = localStorage.getItem('token');\n    const userData = localStorage.getItem('user');\n    \n    if (!token) {\n      navigate('/login');\n      return;\n    }\n    \n    if (userData) {\n      setUser(JSON.parse(userData));\n      // Fetch user's reports when component mounts\n      fetchUserReports();\n    }\n  }, [navigate]);\n\n  // Separate useEffect for Google Maps loading\n  useEffect(() => {\n    // Only load Google Maps API when showing the report form\n    if (showReportForm) {\n      loadGoogleMapsScript();\n      \n      // Clean up when form is closed\n      return () => {\n        if (autocompleteRef.current) {\n          // Clean up event listeners\n          window.google?.maps?.event?.clearInstanceListeners(autocompleteRef.current);\n          autocompleteRef.current = null;\n        }\n      };\n    }\n  }, [showReportForm]);\n\n  const handleReportChange = (e) => {\n    setReportFormData({\n      ...reportFormData,\n      [e.target.name]: e.target.value\n    });\n    \n    // If the location field is changed manually, reset the coordinates\n    if (e.target.name === 'userLocation') {\n      setLocationCoordinates(null);\n    }\n  };\n\n  const handleReportSubmit = async (e) => {\n    e.preventDefault();\n    setFormError('');\n    setFormSuccess('');\n    setLoading(true);\n\n    try {\n      // Use the coordinates from Google Places if available, otherwise use default\n      let coordinates = [-79.3832, 43.6532]; // Toronto coordinates [longitude, latitude]\n      \n      if (locationCoordinates) {\n        // Convert to [longitude, latitude] format for GeoJSON\n        coordinates = [locationCoordinates.lng, locationCoordinates.lat];\n      }\n      \n      // Create proper GeoJSON Point\n      const locationData = {\n        type: 'Point',\n        coordinates: coordinates\n      };\n      \n      // Create the report payload with all required fields\n      const reportData = {\n        name: reportFormData.name,\n        description: reportFormData.description,\n        userLocation: reportFormData.userLocation,\n        type: reportFormData.type,\n        location: locationData\n      };\n      \n      console.log('Submitting report with data:', JSON.stringify(reportData, null, 2));\n      \n      // Make the API request using the report service\n      const response = await reportService.createReport(reportData);\n      \n      console.log('Response:', response.data);\n      \n      if (response.data.success) {\n        setFormSuccess('Report submitted successfully!');\n        setReportFormData({\n          name: '',\n          description: '',\n          userLocation: '',\n          type: 'infrastructure'\n        });\n        setLocationCoordinates(null);\n        setShowReportForm(false);\n        \n        // Refresh reports list after successful submission\n        fetchUserReports();\n      } else {\n        setFormError(response.data.message || 'Unknown error occurred');\n      }\n    } catch (err) {\n      console.error('Error submitting report:', err);\n      \n      // Log all error details to help debug\n      if (err.response) {\n        console.error('Error status:', err.response.status);\n        console.error('Error data:', err.response.data);\n        console.error('Error headers:', err.response.headers);\n        \n        // Display the exact error message from the server for duplicate reports\n        if (err.response.status === 400 && err.response.data && err.response.data.message) {\n          setFormError(err.response.data.message);\n        } else {\n          setFormError(err.response.data?.message || `Server error: ${err.response.status}`);\n        }\n      } else if (err.request) {\n        console.error('No response received:', err.request);\n        setFormError('No response from server. Please try again later.');\n      } else {\n        console.error('Error message:', err.message);\n        setFormError(`Error: ${err.message}`);\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Format date for display\n  const formatDate = (dateString) => {\n    const options = { year: 'numeric', month: 'long', day: 'numeric' };\n    return new Date(dateString).toLocaleDateString(undefined, options);\n  };\n\n  // Helper function to render status with appropriate CSS class\n  const renderStatus = (status) => {\n    let statusClass = '';\n    \n    switch(status) {\n      case 'Waiting for verification':\n        statusClass = 'status-waiting';\n        break;\n      case 'Verified':\n        statusClass = 'status-verified';\n        break;\n      case 'In progress':\n        statusClass = 'status-in-progress';\n        break;\n      case 'Solved':\n        statusClass = 'status-solved';\n        break;\n      default:\n        statusClass = '';\n    }\n    \n    return (\n      <span className={`status-indicator ${statusClass}`}>\n        {status}\n      </span>\n    );\n  };\n\n  // Handle resolving a report\n  const handleResolveReport = async (reportId) => {\n    try {\n      setLoading(true);\n      const response = await reportService.updateReportStatus(reportId, 'Solved');\n      \n      if (response.data.success) {\n        setFormSuccess('Report marked as resolved successfully!');\n        // Update the reports list to reflect the change\n        fetchUserReports();\n      } else {\n        setFormError(response.data.message || 'Failed to update report status');\n      }\n    } catch (err) {\n      console.error('Error resolving report:', err);\n      setFormError('Error updating report status. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // If not logged in, the useEffect will redirect\n  if (!user) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"dashboard\">\n      <h1>Welcome, {user.username}!</h1>\n      \n      {formSuccess && (\n        <div className=\"alert-success\">\n          {formSuccess}\n        </div>\n      )}\n      \n      <div className=\"dashboard-card\">\n        <h2>Your Profile</h2>\n        <p><strong>Username:</strong> {user.username}</p>\n        <p><strong>Email:</strong> {user.email}</p>\n      </div>\n      \n      <div className=\"dashboard-card\">\n        <h2>Report a Problem</h2>\n        {!showReportForm ? (\n          <>\n            <p>Help improve your city by reporting issues you encounter.</p>\n            <button \n              className=\"btn btn-primary\" \n              onClick={() => setShowReportForm(true)}\n            >\n              Create New Report\n            </button>\n          </>\n        ) : (\n          <form onSubmit={handleReportSubmit}>\n            {formError && (\n              <div className=\"alert-error\">{formError}</div>\n            )}\n            \n            <div className=\"form-group\">\n              <label htmlFor=\"name\">Report Title</label>\n              <input\n                type=\"text\"\n                id=\"name\"\n                name=\"name\"\n                value={reportFormData.name}\n                onChange={handleReportChange}\n                className=\"form-control\"\n                required\n              />\n            </div>\n            \n            <div className=\"form-group\">\n              <label htmlFor=\"type\">Type of Issue</label>\n              <select\n                id=\"type\"\n                name=\"type\"\n                value={reportFormData.type}\n                onChange={handleReportChange}\n                className=\"form-control\"\n                required\n              >\n                <option value=\"infrastructure\">Infrastructure</option>\n                <option value=\"cleanliness\">Cleanliness</option>\n                <option value=\"human\">Human-related</option>\n              </select>\n            </div>\n            \n            <div className=\"form-group\">\n              <label htmlFor=\"description\">Description</label>\n              <textarea\n                id=\"description\"\n                name=\"description\"\n                value={reportFormData.description}\n                onChange={handleReportChange}\n                className=\"form-control\"\n                rows=\"5\"\n                required\n              ></textarea>\n            </div>\n            \n            <div className=\"form-group location-group\">\n              <label htmlFor=\"userLocation\">Your Location (Start typing for autocomplete)</label>\n              <input\n                type=\"text\"\n                id=\"userLocation\"\n                name=\"userLocation\"\n                value={reportFormData.userLocation}\n                onChange={handleReportChange}\n                ref={locationInputRef}\n                className=\"form-control\"\n                placeholder=\"e.g., 123 Main St, Toronto\"\n                autoComplete=\"off\"\n                required\n              />\n              {locationCoordinates && (\n                <div className=\"location-found\">\n                  <small>✓ Location found: {reportFormData.userLocation}</small>\n                </div>\n              )}\n            </div>\n            \n            <div className=\"form-actions\">\n              <button \n                type=\"button\" \n                className=\"btn btn-secondary\"\n                onClick={() => setShowReportForm(false)}\n              >\n                Cancel\n              </button>\n              <button \n                type=\"submit\" \n                className=\"btn btn-primary\"\n                disabled={loading}\n              >\n                {loading ? 'Submitting...' : 'Submit Report'}\n              </button>\n            </div>\n          </form>\n        )}\n      </div>\n      \n      <div className=\"dashboard-card\">\n        <h2>Your Reports</h2>\n        {!reportsFetched ? (\n          <p>Loading your reports...</p>\n        ) : userReports.length === 0 ? (\n          <p>You haven't submitted any reports yet.</p>\n        ) : (\n          <div className=\"reports-list\">\n            {userReports.map(report => (\n              <div key={report._id} className=\"report-item\">\n                <h3>{report.name}</h3>\n                <div className=\"report-details\">\n                  <p><strong>Type:</strong> {report.type}</p>\n                  <p><strong>Status:</strong> {renderStatus(report.status)}</p>\n                  <p><strong>Description:</strong> {report.description}</p>\n                  <p><strong>Location:</strong> {report.userLocation}</p>\n                  <p><strong>Submitted:</strong> {formatDate(report.createdAt)}</p>\n                </div>\n                {report.status !== 'Solved' && (\n                  <div className=\"report-actions\">\n                    <button \n                      className=\"btn btn-primary\" \n                      onClick={() => handleResolveReport(report._id)}\n                      disabled={loading}\n                    >\n                      Mark as Resolved\n                    </button>\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default Dashboard; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}