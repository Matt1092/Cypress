{"ast":null,"code":"import axios from 'axios';\n\n// Create a configured axios instance with base URL and default settings\nconst api = axios.create({\n  baseURL: 'http://localhost:5000/api',\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  timeout: 15000,\n  // 15 second timeout - increased from 10s\n  withCredentials: false // Explicitly set to false for cross-origin requests\n});\n\n// Add a request interceptor to attach the auth token to every request\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  // Log requests in development environment\n  console.log(`API Request: ${config.method.toUpperCase()} ${config.url}`);\n  return config;\n}, error => {\n  console.error('API Request Error:', error);\n  return Promise.reject(error);\n});\n\n// Add a response interceptor to handle common error patterns\napi.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n  console.error('API Error:', error);\n\n  // Check for network errors\n  if (!error.response) {\n    console.error('Network error - no response received');\n\n    // If we haven't retried yet, retry once\n    if (!originalRequest._retry && originalRequest.url !== '/auth/login') {\n      originalRequest._retry = true;\n      console.log('Retrying request once...');\n\n      // Wait 1 second before retrying\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      return api(originalRequest);\n    }\n  }\n\n  // Handle token expiration/invalidation\n  if (error.response && error.response.status === 401) {\n    console.log('Authentication error, redirecting to login');\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    // Redirect to login page if not already there\n    if (window.location.pathname !== '/login') {\n      window.location.href = '/login';\n    }\n  }\n  return Promise.reject(error);\n});\n\n// Auth service functions\nexport const authService = {\n  login: async credentials => {\n    console.log('Login attempt with:', credentials.email);\n\n    // For login, try with proper error handling and fallbacks\n    try {\n      console.log('Attempting login with API instance');\n      const response = await api.post('/auth/login', credentials);\n      console.log('Login successful via API instance:', response.data);\n\n      // Validate response has required fields\n      if (!response.data.token) {\n        console.error('Server response missing token:', response.data);\n        throw new Error('Server response missing authentication token');\n      }\n      return response;\n    } catch (err) {\n      console.error('Login error with API instance:', err);\n      if (!err.response) {\n        // If network error, try direct URL as fallback\n        console.log('Network error detected, trying direct URL fallback');\n        try {\n          const fallbackResponse = await axios.post('http://localhost:5000/api/auth/login', credentials, {\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            },\n            timeout: 20000 // Increase timeout for fallback\n          });\n          console.log('Login successful via direct URL:', fallbackResponse.data);\n\n          // Validate fallback response\n          if (!fallbackResponse.data.token) {\n            console.error('Fallback response missing token:', fallbackResponse.data);\n            throw new Error('Server response missing authentication token');\n          }\n          return fallbackResponse;\n        } catch (fallbackErr) {\n          console.error('Login failed with fallback approach:', fallbackErr);\n          throw fallbackErr;\n        }\n      }\n\n      // For other types of errors, just propagate\n      throw err;\n    }\n  },\n  register: async userData => {\n    return api.post('/auth/register', userData);\n  },\n  updateProfile: async userData => {\n    return api.put('/auth/profile', userData);\n  }\n};\n\n// Report service functions\nexport const reportService = {\n  getAll: async () => {\n    return api.get('/reports');\n  },\n  getUserReports: async () => {\n    return api.get('/reports/user/my-reports');\n  },\n  createReport: async reportData => {\n    return api.post('/reports', reportData);\n  },\n  updateReport: async (id, reportData) => {\n    return api.put(`/reports/${id}`, reportData);\n  },\n  updateReportStatus: async (id, status) => {\n    return api.put(`/reports/${id}/status`, {\n      status\n    });\n  },\n  deleteReport: async id => {\n    return api.delete(`/reports/${id}`);\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","headers","timeout","withCredentials","interceptors","request","use","config","token","localStorage","getItem","console","log","method","toUpperCase","url","error","Promise","reject","response","originalRequest","_retry","resolve","setTimeout","status","removeItem","window","location","pathname","href","authService","login","credentials","email","post","data","Error","err","fallbackResponse","fallbackErr","register","userData","updateProfile","put","reportService","getAll","get","getUserReports","createReport","reportData","updateReport","id","updateReportStatus","deleteReport","delete"],"sources":["/home/matt/Projects/Cypress2/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Create a configured axios instance with base URL and default settings\nconst api = axios.create({\n  baseURL: 'http://localhost:5000/api',\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  timeout: 15000, // 15 second timeout - increased from 10s\n  withCredentials: false // Explicitly set to false for cross-origin requests\n});\n\n// Add a request interceptor to attach the auth token to every request\napi.interceptors.request.use(\n  config => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers['x-auth-token'] = token;\n    }\n    \n    // Log requests in development environment\n    console.log(`API Request: ${config.method.toUpperCase()} ${config.url}`);\n    \n    return config;\n  },\n  error => {\n    console.error('API Request Error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Add a response interceptor to handle common error patterns\napi.interceptors.response.use(\n  response => response,\n  async (error) => {\n    const originalRequest = error.config;\n    \n    console.error('API Error:', error);\n    \n    // Check for network errors\n    if (!error.response) {\n      console.error('Network error - no response received');\n      \n      // If we haven't retried yet, retry once\n      if (!originalRequest._retry && originalRequest.url !== '/auth/login') {\n        originalRequest._retry = true;\n        console.log('Retrying request once...');\n        \n        // Wait 1 second before retrying\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        return api(originalRequest);\n      }\n    }\n    \n    // Handle token expiration/invalidation\n    if (error.response && error.response.status === 401) {\n      console.log('Authentication error, redirecting to login');\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      // Redirect to login page if not already there\n      if (window.location.pathname !== '/login') {\n        window.location.href = '/login';\n      }\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\n// Auth service functions\nexport const authService = {\n  login: async (credentials) => {\n    console.log('Login attempt with:', credentials.email);\n    \n    // For login, try with proper error handling and fallbacks\n    try {\n      console.log('Attempting login with API instance');\n      const response = await api.post('/auth/login', credentials);\n      console.log('Login successful via API instance:', response.data);\n      \n      // Validate response has required fields\n      if (!response.data.token) {\n        console.error('Server response missing token:', response.data);\n        throw new Error('Server response missing authentication token');\n      }\n      \n      return response;\n    } catch (err) {\n      console.error('Login error with API instance:', err);\n      \n      if (!err.response) {\n        // If network error, try direct URL as fallback\n        console.log('Network error detected, trying direct URL fallback');\n        try {\n          const fallbackResponse = await axios.post('http://localhost:5000/api/auth/login', credentials, {\n            headers: {\n              'Content-Type': 'application/json',\n              'Accept': 'application/json'\n            },\n            timeout: 20000 // Increase timeout for fallback\n          });\n          \n          console.log('Login successful via direct URL:', fallbackResponse.data);\n          \n          // Validate fallback response\n          if (!fallbackResponse.data.token) {\n            console.error('Fallback response missing token:', fallbackResponse.data);\n            throw new Error('Server response missing authentication token');\n          }\n          \n          return fallbackResponse;\n        } catch (fallbackErr) {\n          console.error('Login failed with fallback approach:', fallbackErr);\n          throw fallbackErr;\n        }\n      }\n      \n      // For other types of errors, just propagate\n      throw err;\n    }\n  },\n  register: async (userData) => {\n    return api.post('/auth/register', userData);\n  },\n  updateProfile: async (userData) => {\n    return api.put('/auth/profile', userData);\n  }\n};\n\n// Report service functions\nexport const reportService = {\n  getAll: async () => {\n    return api.get('/reports');\n  },\n  getUserReports: async () => {\n    return api.get('/reports/user/my-reports');\n  },\n  createReport: async (reportData) => {\n    return api.post('/reports', reportData);\n  },\n  updateReport: async (id, reportData) => {\n    return api.put(`/reports/${id}`, reportData);\n  },\n  updateReportStatus: async (id, status) => {\n    return api.put(`/reports/${id}/status`, { status });\n  },\n  deleteReport: async (id) => {\n    return api.delete(`/reports/${id}`);\n  }\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}